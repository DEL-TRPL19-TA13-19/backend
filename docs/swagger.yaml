basePath: /
definitions:
  abstraction.PaginationInfo:
    properties:
      count:
        type: integer
      more_records:
        type: boolean
      page:
        type: integer
      page_size:
        type: integer
      sort:
        type: string
      sort_by:
        type: string
    type: object
  dto.AlternativeCreateRequest:
    properties:
      aksesibilitas:
        example: Kondisi jalan bagus dan bisa dilewati kendaraan pengangkut sampah
        type: string
      cakupan_rumah:
        example: <40 Rumah
        type: string
      collection_id:
        type: string
      jarak_pemukiman:
        example: 0m-100m
        type: string
      jarak_sungai:
        example: Lokasi memenuhi peil banjir
        type: string
      jarak_tpa:
        example: Alternatif berada di jangkauan layanan TPA
        type: string
      nama:
        example: nama
        type: string
      partisipasi_masyarakat:
        example: < 20% Masyarakat Setuju
        type: string
      sort:
        type: integer
      timbulan_sampah:
        example: Jaringan Jalan
        type: string
    type: object
  dto.AlternativeCreateResponse:
    properties:
      aksesibilitas:
        example: Kondisi jalan bagus dan bisa dilewati kendaraan pengangkut sampah
        type: string
      cakupan_rumah:
        example: <40 Rumah
        type: string
      collection_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      final_scores:
        $ref: '#/definitions/entity.FinalScoreEntityModel'
      id:
        type: string
      jarak_pemukiman:
        example: 0m-100m
        type: string
      jarak_sungai:
        example: Lokasi memenuhi peil banjir
        type: string
      jarak_tpa:
        example: Alternatif berada di jangkauan layanan TPA
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      nama:
        example: nama
        type: string
      partisipasi_masyarakat:
        example: < 20% Masyarakat Setuju
        type: string
      scores:
        $ref: '#/definitions/entity.ScoreEntityModel'
      sort:
        type: integer
      timbulan_sampah:
        example: Jaringan Jalan
        type: string
    type: object
  dto.AlternativeCreateResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.AlternativeCreateResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.AlternativeDeleteResponse:
    properties:
      id:
        type: string
    type: object
  dto.AlternativeDeleteResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.AlternativeDeleteResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.AlternativeGetByCollectionIDResponse:
    properties:
      datas:
        items:
          $ref: '#/definitions/entity.AlternativeEntityModel'
        type: array
    type: object
  dto.AlternativeGetByCollectionIDResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.AlternativeGetByCollectionIDResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.AlternativeGetByIDResponse:
    properties:
      datas:
        $ref: '#/definitions/entity.AlternativeEntityModel'
    type: object
  dto.AlternativeGetByIDResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.AlternativeGetByIDResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.AlternativeUpdateRequest:
    properties:
      aksesibilitas:
        example: Kondisi jalan bagus dan bisa dilewati kendaraan pengangkut sampah
        type: string
      cakupan_rumah:
        example: <40 Rumah
        type: string
      id:
        type: string
      jarak_pemukiman:
        example: 0m-100m
        type: string
      jarak_sungai:
        example: Lokasi memenuhi peil banjir
        type: string
      jarak_tpa:
        example: Alternatif berada di jangkauan layanan TPA
        type: string
      nama:
        example: nama
        type: string
      partisipasi_masyarakat:
        example: < 20% Masyarakat Setuju
        type: string
      sort:
        type: integer
      timbulan_sampah:
        example: Jaringan Jalan
        type: string
    required:
    - id
    type: object
  dto.AlternativeUpdateResponse:
    properties:
      aksesibilitas:
        example: Kondisi jalan bagus dan bisa dilewati kendaraan pengangkut sampah
        type: string
      cakupan_rumah:
        example: <40 Rumah
        type: string
      collection_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      final_scores:
        $ref: '#/definitions/entity.FinalScoreEntityModel'
      id:
        type: string
      jarak_pemukiman:
        example: 0m-100m
        type: string
      jarak_sungai:
        example: Lokasi memenuhi peil banjir
        type: string
      jarak_tpa:
        example: Alternatif berada di jangkauan layanan TPA
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      nama:
        example: nama
        type: string
      partisipasi_masyarakat:
        example: < 20% Masyarakat Setuju
        type: string
      scores:
        $ref: '#/definitions/entity.ScoreEntityModel'
      sort:
        type: integer
      timbulan_sampah:
        example: Jaringan Jalan
        type: string
    type: object
  dto.AlternativeUpdateResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.AlternativeUpdateResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.AlternativesGetResponse:
    properties:
      datas:
        items:
          $ref: '#/definitions/entity.AlternativeEntityModel'
        type: array
    type: object
  dto.AlternativesGetResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.AlternativesGetResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.AuthLoginRequest:
    properties:
      password:
        example: pass1234
        type: string
      username:
        example: nathan
        type: string
    required:
    - password
    - username
    type: object
  dto.AuthLoginResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/entity.CollectionEntityModel'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      email:
        example: nathan.nandoo@gmail.com
        type: string
      id:
        type: string
      is_active:
        type: boolean
      message:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        example: nathan fernando
        type: string
      password:
        example: pass1234
        type: string
      username:
        example: nathan
        type: string
    required:
    - is_active
    - name
    - password
    - username
    type: object
  dto.AuthLoginResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.AuthLoginResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.AuthRegisterRequest:
    properties:
      email:
        example: nathan.nandoo@gmail.com
        type: string
      is_active:
        type: boolean
      name:
        example: nathan fernando
        type: string
      password:
        example: pass1234
        type: string
      username:
        example: nathan
        type: string
    required:
    - is_active
    - name
    - password
    - username
    type: object
  dto.AuthRegisterResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/entity.CollectionEntityModel'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      email:
        example: nathan.nandoo@gmail.com
        type: string
      id:
        type: string
      is_active:
        type: boolean
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        example: nathan fernando
        type: string
      password:
        example: pass1234
        type: string
      username:
        example: nathan
        type: string
    required:
    - is_active
    - name
    - password
    - username
    type: object
  dto.AuthRegisterResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.AuthRegisterResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.CollectionCreateRequest:
    properties:
      deskripsi:
        type: string
      is_calculated:
        type: boolean
      nama:
        example: Mencari lokasi TPS di balige
        type: string
    type: object
  dto.CollectionCreateResponse:
    properties:
      alternatives:
        items:
          $ref: '#/definitions/entity.AlternativeEntityModel'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      deskripsi:
        type: string
      final_scores:
        items:
          $ref: '#/definitions/entity.FinalScoreEntityModel'
        type: array
      id:
        type: string
      is_calculated:
        type: boolean
      modified_at:
        type: string
      modified_by:
        type: string
      nama:
        example: Mencari lokasi TPS di balige
        type: string
      scores:
        items:
          $ref: '#/definitions/entity.ScoreEntityModel'
        type: array
      user_id:
        type: string
    type: object
  dto.CollectionCreateResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.CollectionCreateResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.CollectionDeleteResponse:
    properties:
      id:
        type: string
    type: object
  dto.CollectionDeleteResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.CollectionDeleteResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.CollectionGetByIDResponse:
    properties:
      datas:
        $ref: '#/definitions/entity.CollectionEntityModel'
    type: object
  dto.CollectionGetByIDResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.CollectionGetByIDResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.CollectionUpdateRequest:
    properties:
      deskripsi:
        type: string
      id:
        type: string
      is_calculated:
        type: boolean
      nama:
        example: Mencari lokasi TPS di balige
        type: string
    required:
    - id
    type: object
  dto.CollectionUpdateResponse:
    properties:
      alternatives:
        items:
          $ref: '#/definitions/entity.AlternativeEntityModel'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      deskripsi:
        type: string
      final_scores:
        items:
          $ref: '#/definitions/entity.FinalScoreEntityModel'
        type: array
      id:
        type: string
      is_calculated:
        type: boolean
      modified_at:
        type: string
      modified_by:
        type: string
      nama:
        example: Mencari lokasi TPS di balige
        type: string
      scores:
        items:
          $ref: '#/definitions/entity.ScoreEntityModel'
        type: array
      user_id:
        type: string
    type: object
  dto.CollectionUpdateResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.CollectionUpdateResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.CollectionsGetResponse:
    properties:
      datas:
        items:
          $ref: '#/definitions/entity.CollectionEntityModel'
        type: array
    type: object
  dto.CollectionsGetResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.CollectionsGetResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.TpsCreateRequest:
    properties:
      jarak_tpa:
        type: string
      kabupaten:
        type: string
      kecamatan:
        type: string
      kelurahan:
        type: string
      lattitude:
        type: string
      location:
        type: string
      longtitude:
        type: string
      name:
        type: string
    type: object
  dto.TpsCreateResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      jarak_tpa:
        type: string
      kabupaten:
        type: string
      kecamatan:
        type: string
      kelurahan:
        type: string
      lattitude:
        type: string
      location:
        type: string
      longtitude:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  dto.TpsCreateResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.TpsCreateResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.TpsDeleteResponse:
    properties:
      id:
        type: string
    type: object
  dto.TpsDeleteResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.TpsDeleteResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.TpsGetByIdResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      jarak_tpa:
        type: string
      kabupaten:
        type: string
      kecamatan:
        type: string
      kelurahan:
        type: string
      lattitude:
        type: string
      location:
        type: string
      longtitude:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  dto.TpsGetByIdResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.TpsGetByIdResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.TpsGetResponseDoc:
    properties:
      body:
        properties:
          data:
            items:
              $ref: '#/definitions/entity.TpsEntityModel'
            type: array
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  dto.TpsUpdateRequest:
    properties:
      id:
        type: string
      jarak_tpa:
        type: string
      kabupaten:
        type: string
      kecamatan:
        type: string
      kelurahan:
        type: string
      lattitude:
        type: string
      location:
        type: string
      longtitude:
        type: string
      name:
        type: string
    required:
    - id
    type: object
  dto.TpsUpdateResponse:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      jarak_tpa:
        type: string
      kabupaten:
        type: string
      kecamatan:
        type: string
      kelurahan:
        type: string
      lattitude:
        type: string
      location:
        type: string
      longtitude:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  dto.TpsUpdateResponseDoc:
    properties:
      body:
        properties:
          data:
            $ref: '#/definitions/dto.TpsUpdateResponse'
          meta:
            $ref: '#/definitions/response.Meta'
        type: object
    type: object
  entity.AlternativeEntityModel:
    properties:
      aksesibilitas:
        example: Kondisi jalan bagus dan bisa dilewati kendaraan pengangkut sampah
        type: string
      cakupan_rumah:
        example: <40 Rumah
        type: string
      collection_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      final_scores:
        $ref: '#/definitions/entity.FinalScoreEntityModel'
      id:
        type: string
      jarak_pemukiman:
        example: 0m-100m
        type: string
      jarak_sungai:
        example: Lokasi memenuhi peil banjir
        type: string
      jarak_tpa:
        example: Alternatif berada di jangkauan layanan TPA
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      nama:
        example: nama
        type: string
      partisipasi_masyarakat:
        example: < 20% Masyarakat Setuju
        type: string
      scores:
        $ref: '#/definitions/entity.ScoreEntityModel'
      sort:
        type: integer
      timbulan_sampah:
        example: Jaringan Jalan
        type: string
    type: object
  entity.CollectionEntityModel:
    properties:
      alternatives:
        items:
          $ref: '#/definitions/entity.AlternativeEntityModel'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      deskripsi:
        type: string
      final_scores:
        items:
          $ref: '#/definitions/entity.FinalScoreEntityModel'
        type: array
      id:
        type: string
      is_calculated:
        type: boolean
      modified_at:
        type: string
      modified_by:
        type: string
      nama:
        example: Mencari lokasi TPS di balige
        type: string
      scores:
        items:
          $ref: '#/definitions/entity.ScoreEntityModel'
        type: array
      user_id:
        type: string
    type: object
  entity.FinalScoreEntityModel:
    properties:
      alternative_id:
        type: string
      collection_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      final_score:
        type: number
      id:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      rank:
        type: integer
    type: object
  entity.ScoreEntityModel:
    properties:
      aksesibilitas:
        type: number
      alternative_id:
        type: string
      cakupan_rumah:
        type: number
      collection_id:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      jarak_pemukiman:
        type: number
      jarak_sungai:
        type: number
      jarak_tpa:
        type: number
      modified_at:
        type: string
      modified_by:
        type: string
      partisipasi_masyarakat:
        type: number
      timbulan_sampah:
        type: number
    type: object
  entity.TpsEntityModel:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      jarak_tpa:
        type: string
      kabupaten:
        type: string
      kecamatan:
        type: string
      kelurahan:
        type: string
      lattitude:
        type: string
      location:
        type: string
      longtitude:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        type: string
    type: object
  response.Meta:
    properties:
      info:
        $ref: '#/definitions/abstraction.PaginationInfo'
      message:
        default: "true"
        type: string
      success:
        default: true
        type: boolean
    type: object
  response.errorResponse:
    properties:
      error:
        type: string
      meta:
        $ref: '#/definitions/response.Meta'
    type: object
info:
  contact: {}
  description: Dokumentasi API D4 TRPL 2019 TA13.
  title: API TA
  version: "1.0"
paths:
  /ahp/criteria:
    get:
      consumes:
      - application/json
      description: Get ALl Criteria Alternative
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get All Criteria Alternative
      tags:
      - AHP
  /ahp/final_scores/{collection_id}:
    get:
      consumes:
      - application/json
      description: Get Final Scores
      parameters:
      - description: collection_id path
        in: path
        name: collection_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get Final Scores
      tags:
      - AHP
  /ahp/final_scores/calculate/{collection_id}:
    get:
      consumes:
      - application/json
      description: Calculate Final Scores by Collection ID
      parameters:
      - description: collection_id path
        in: path
        name: collection_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Calculate Final Scores by Collection ID
      tags:
      - AHP
  /ahp/scores/{collection_id}:
    get:
      consumes:
      - application/json
      description: Get Scores By Collection ID
      parameters:
      - description: collection_id path
        in: path
        name: collection_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get Scores By Collection ID
      tags:
      - AHP
  /ahp/scores/calculate/{collection_id}:
    get:
      consumes:
      - application/json
      description: Calculate Scores by Collection ID
      parameters:
      - description: collection_id path
        in: path
        name: collection_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Calculate Scores by Collection ID
      tags:
      - AHP
  /alternative:
    get:
      consumes:
      - application/json
      description: Get All Alternatives
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AlternativesGetResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get All Alternatives
      tags:
      - alternative
    patch:
      consumes:
      - application/json
      description: Update alternative
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AlternativeUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AlternativeUpdateResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Update alternative
      tags:
      - alternative
    post:
      consumes:
      - application/json
      description: Create Alternative
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AlternativeCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AlternativeCreateResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Create Alternative
      tags:
      - alternative
  /alternative/{id}:
    delete:
      consumes:
      - application/json
      description: Delete alternative
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AlternativeDeleteResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Delete alternative
      tags:
      - alternative
    get:
      consumes:
      - application/json
      description: Get Alternatives By ID
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AlternativeGetByIDResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get Alternatives By ID
      tags:
      - alternative
  /alternative/collection/{collection_id}:
    get:
      consumes:
      - application/json
      description: Get Alternatives By Collection ID
      parameters:
      - description: collection_id path
        in: path
        name: collection_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AlternativeGetByCollectionIDResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get Alternatives By Collection ID
      tags:
      - alternative
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login auth
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthLoginResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Login auth
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register auth
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AuthRegisterResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Register auth
      tags:
      - auth
  /collection:
    get:
      consumes:
      - application/json
      description: Get ALl Collections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CollectionsGetResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get All Collections
      tags:
      - collection
    patch:
      consumes:
      - application/json
      description: Update collection
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CollectionUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CollectionUpdateResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Update collection
      tags:
      - collection
    post:
      consumes:
      - application/json
      description: Create collection
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CollectionCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CollectionCreateResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Create collection
      tags:
      - collection
  /collection/{id}:
    delete:
      consumes:
      - application/json
      description: Delete collection
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CollectionDeleteResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Delete collection
      tags:
      - collection
    get:
      consumes:
      - application/json
      description: Get Collection By CollectionID
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CollectionGetByIDResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get Collection By CollectionID
      tags:
      - collection
  /collection/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Get Collection By UserID
      parameters:
      - description: user_id path
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CollectionsGetResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get Collection By UserID
      tags:
      - collection
  /tps:
    get:
      consumes:
      - application/json
      description: Get All Tps
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TpsGetResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get All Tps
      tags:
      - tps
    patch:
      consumes:
      - application/json
      description: Update tps
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TpsUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TpsUpdateResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Update tps
      tags:
      - tps
    post:
      consumes:
      - application/json
      description: Create tps
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TpsCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TpsCreateResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Create tps
      tags:
      - tps
  /tps/{id}:
    delete:
      consumes:
      - application/json
      description: Delete tps
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TpsDeleteResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Delete tps
      tags:
      - tps
    get:
      consumes:
      - application/json
      description: Get Tps by id
      parameters:
      - description: id path
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TpsGetByIdResponseDoc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.errorResponse'
      summary: Get Tps by id
      tags:
      - tps
swagger: "2.0"
